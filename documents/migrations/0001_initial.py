# Generated by Django 3.2.3 on 2021-06-26 18:36

import uuid

import django.core.serializers.json
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import documents.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("services", "0002_serviceapikey"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "business_id",
                    models.CharField(
                        blank=True,
                        help_text="The business ID of the organization which owns this document.",
                        max_length=9,
                        validators=[documents.validators.BusinessIDValidator()],
                        verbose_name="business ID",
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Transaction identifier given by the owning service. Could be e.g. a UUID.",
                        max_length=255,
                        verbose_name="transaction ID",
                    ),
                ),
                (
                    "tos_function_id",
                    models.CharField(
                        help_text="UUID without dashes. Should correspond with a Function instance (e.g. the id from https://api.hel.fi/helerm/v1/function/eb30af1d9d654ebc98287ca25f231bf6/) which is applied to the stored document when considering storage time.",
                        max_length=32,
                        verbose_name="TOS function ID",
                    ),
                ),
                (
                    "tos_record_id",
                    models.CharField(
                        help_text="UUID without dashes. Should correspond to a record ID (e.g. records[].id from https://api.hel.fi/helerm/v1/function/eb30af1d9d654ebc98287ca25f231bf6/) within a Function instance which is applied to the stored document when considering storage time.",
                        max_length=32,
                        verbose_name="TOS record ID",
                    ),
                ),
                (
                    "draft",
                    models.BooleanField(
                        default=False,
                        help_text="Is this document a draft or not. Drafts can be modified by a user.",
                        verbose_name="draft",
                    ),
                ),
                (
                    "locked_after",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time after which this document cannot be modified, except for deleting. This field should be filled by the calling service if it knows e.g. that a certain application has a deadline.",
                        null=True,
                        verbose_name="locked after",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="Key-value pairs given by the calling service. These fields should enable the service to store some relevant information which it can use to filter/sort documents, e.g. the handler of the document.",
                        verbose_name="metadata",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        help_text="Status information given by the owning service. Could be e.g. some constant string.",
                        max_length=255,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        help_text="Type information given by the owning service. Could be e.g. the type of the document.",
                        max_length=255,
                        verbose_name="type",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="The service which owns this document.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="documents",
                        to="services.service",
                        verbose_name="service",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="The creator/owner of this document.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="documents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "document",
                "verbose_name_plural": "documents",
                "default_related_name": "documents",
            },
        ),
    ]
