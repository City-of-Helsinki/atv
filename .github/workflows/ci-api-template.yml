name: ci-api-template
on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        default: '3.11'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  SECRET_KEY: topsecret123
  POSTGRES_DB: test_atv
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: "postgres://postgres:postgres@localhost/test_atv"
  FIELD_ENCRYPTION_KEYS: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [${{ inputs.python-version }}]
    services:
      postgres:
        image: postgis/postgis:14-3.2-alpine
        env:
          # Note: not redundant, parent env is not applied to service
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_atv
          FIELD_ENCRYPTION_KEYS: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Required by Sonar
          fetch-depth: 0
      - name: Update apt
        run: sudo apt-get update
      - name: psycopg2 prerequisites
        run: sudo apt-get install libpq-dev
      - name: System requirements for Django
        run: sudo apt-get install gettext postgresql-client
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: Check migrations
        run: |
          python manage.py makemigrations --dry-run --check
      - name: Apply migrations
        run: |
          python manage.py migrate
      - name: Compile translations
        run: |
          django-admin compilemessages
        continue-on-error: true
      - name: Check OpenAPI schema
        run: |
          python manage.py spectacular --lang en --validate --fail-on-warn --api-version v1
        continue-on-error: true
      - name: Check commitlint
        uses: wagoid/commitlint-github-action@0d749a1a91d4770e983a7b8f83d4a3f0e7e0874e  # v5.4.4
        continue-on-error: true
      # With pytest-cov use: --cov=.
      # Some errors, skipping --doctest-modules for now
      - name: Run tests
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: pytest
          run: pytest -ra -vvv --cov=.
        continue-on-error: true
  black:
    name: Coding style - black
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Run black
        uses: psf/black@stable
  flake8:
    name: Coding style - flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install dependencies
        run: pip install flake8 pep8-naming flake8-bugbear
      - name: Run flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: flake8
  isort:
    name: Coding style - isort
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install dependencies
        run: pip install isort
      - name: Run isort
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: isort -c .